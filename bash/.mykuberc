# vi: ft=sh

# Generic kubernetes stuff
alias k='kubectl'
# Autocompletion for this alias
# Autocompletion for fakefed as if it was kubectl
source /usr/share/bash-completion/completions/kubectl
if [[ $(type -t compopt) == "builtin" ]]; then
	complete -o default -F __start_kubectl k
	complete -o default -F __start_kubectl fakefed
else
	complete -o default -o nospace -F __start_kubectl k
	complete -o default -o nospace -F __start_kubectl fakefed
fi

# Helm stuff
export HELM_TLS_VERIFY=1

alias ki='kube-prompt'
alias kui="kubectl proxy"
alias kctxl="kubectl config get-contexts"
alias kdump="k8s-dump --apiserver-host=http://127.0.0.1:8001 --output=$HOME"
alias kube-bash='kubectl run --rm -i --tty $(whoami)-shell --image=tanelmae/k8s-debug-pod --restart=Never'
alias kube-go='kubectl run --rm -i --tty $(whoami)-shell --image=golang:alpine --restart=Never'

kctx() {
	local CLUSTER_NAME=${1}
	if [[ -z $CLUSTER_NAME ]]; then
		local OPTIONS=$(kubectl config get-contexts -o name)
		OPTIONS+=' EXIT'

		local CTX=$(kubectl config current-context)
		local NS=$(kubectl config view -o jsonpath="{.contexts[?(@.name=='$CTX')].context.namespace}")
		if [[ -z $NS ]]; then
			NS="default"
		fi

		echo "Current ctx/ns: $CTX/$NS"
		echo "Switch to which context? (or EXIT)"

		select opt in $OPTIONS; do
			if [ "$opt" = "EXIT" ]; then
				echo "Staying in the current context"
			else
				kubectl config use-context "$opt"
			fi
			break
		done
	else
		kubectl config use-context "$CLUSTER_NAME"
	fi
	CTX=$(kubectl config current-context)
	NS=$(kubectl config view -o jsonpath="{.contexts[?(@.name=='$CTX')].context.namespace}")
	if [[ -z $NS ]]; then
		NS="default"
	fi
	echo "Current ctx/ns: $CTX/$NS"
}

kns() {
	local CTX=$(kubectl config current-context)
	local NAMESPACE=${1}
	if [[ -z $NAMESPACE ]]; then
		local OPTIONS=$(kubectl get namespaces -o jsonpath='{range .items[*].metadata.name}{@}{"\n"}{end}')
		OPTIONS+=' EXIT'

		local NS=$(kubectl config view -o jsonpath="{.contexts[?(@.name=='$CTX')].context.namespace}")
		if [[ -z $NS ]]; then
			NS="default"
		fi

		echo "Current ctx/ns: $CTX/$NS"
		echo "Switch to which namespace? (or EXIT)"

		select opt in $OPTIONS; do
			if [ "$opt" = "EXIT" ]; then
				echo "Staying in the current namespace"
			else
				kubectl config set-context "$CTX" --namespace "$opt"
			fi
			break
		done
	else
		kubectl config set-context "$CTX" --namespace "$NAMESPACE"
	fi
	NS=$(kubectl config view -o jsonpath="{.contexts[?(@.name=='$CTX')].context.namespace}")
	if [[ -z $NS ]]; then
		NS="default"
	fi
	echo "Current ctx/ns: $CTX/$NS"
}

klogs() {
	# Resetting OPTIND is necessary if getopts was used previously in the script.
	# It is a good idea to make OPTIND local if you process options in a function.
	local OPTIND

	if [ $# -lt 1 ]; then
		cat << EOF
Usage: ${0##*/} SVC -c container -H expression -s since [-fj]

    -c	container. If not specified, container=SVC
    -h	highlight matching expression
    -s	since (put a time like [#h|#m|#s], defaults to 24h)
    -f	follow
    -j	json output
EOF
		return 1
	fi

	local SVC="${1}"
	shift # Remove SVC from arguments list
	CONTAINER=$SVC
	SINCE="24h"
	FOLLOW="false"
	JSON=""
	HIGHLIGHT=""

	while getopts :c:h:s:fj opt; do
		case $opt in
			c)
				CONTAINER=$OPTARG
				;;
			h)
				HIGHLIGHT=$OPTARG
				;;
			s)
				SINCE=$OPTARG
				;;
			f)
				FOLLOW="true"
				;;
			j)
				JSON="--jq '.'"
				;;

		esac
	done
	shift "$((OPTIND - 1))" # Shift off the options and optional --.

	if [ -n "$HIGHLIGHT" ]; then
		kubetail "$SVC" -k pod -c "$CONTAINER" -s "$SINCE" -f "$FOLLOW" $JSON | rg -i "$HIGHLIGHT|$"
	else
		kubetail "$SVC" -k pod -c "$CONTAINER" -s "$SINCE" -f "$FOLLOW" $JSON
	fi

}

deploysvc() {
	for i in $(cat ~/svclist); do fakefed dev set-deployment $i $1; done
	fakefed dev set-deployment rtm $1-race
}

# Generic gcloud stuff
alias gcl='gcloud alpha interactive --context="gcloud "'
alias gcls="gcloud container clusters list"
alias glog="gcloud auth login --format='flattened' | grep -o '^access_token:.*' | tr -s ' ' | cut -d' ' -f2 | pbcopy"
alias gtok="cat ~/.kube/config | grep -o 'access-token:.*' | cut -d' ' -f2 | pbcopy"
alias gccls="gcloud config configurations list"
alias gcca="gcloud config configurations activate "

alias kubeadmin='kubectl create clusterrolebinding $(whoami)-admin-binding --clusterrole=cluster-admin --user=$(gcloud config get-value core/account)'
